#!/usr/bin/env pandda.python

import os, sys, shutil, copy, glob

from libtbx import phil

############################################################################

master_phil_def = """
input {
    outdir = ./collated
        .type = str
    pandda_dir = ./
        .type = str
    protein = None
        .type = str
    refine = False
        .type = bool
}
"""
# Read in the master phil
master_phil = phil.parse(master_phil_def)
# Show defaults and exit
if '--show-defaults' in sys.argv:
    print('\n# DEFAULTS\n')
    master_phil.show()
    sys.exit()
# Copy the args so that we can remove items from the list without affecting sys.argv etc
args = copy.copy(sys.argv[1:])
# Build an interpreter from the master phil
cmd_interpr = master_phil.command_line_argument_interpreter(home_scope="input")
# Look for cmd line arguments
cmd_line_args = [a for a in args if (('=' in a) and not os.path.exists(a))]
# Remove them from the original lists
[args.remove(a) for a in cmd_line_args]
# Parse these arguments
cmd_sources = [cmd_interpr.process(arg=a) for a in cmd_line_args]
# Combine the phils
working_phil = master_phil.fetch(sources=cmd_sources)

# Pull out the python object of the arguments
params = working_phil.extract().input

# Check protein has been provided
if not params.protein:  raise Exception('Protein must be provided: protein=XXX')
# Create output directory
if not os.path.exists(params.outdir):   os.mkdir(params.outdir)
# Check input directory
assert os.path.exists(params.pandda_dir)

merged_files = [a for a in args if (a.endswith('.pdb') and os.path.exists(a))]

############################################################################

print '\n'.join(merged_files)

for mf in merged_files:
    
    tag = os.path.basename(mf).split('-')[0]

    tag_dir = os.path.join(params.outdir, params.protein+'-'+tag)
    if not os.path.exists(tag_dir): os.mkdir(tag_dir)

    print 'BUILDING DIRECTORY:', tag_dir

    out_mf = os.path.join(tag_dir, 'pandda-merged.pdb')
    shutil.copy(mf, out_mf)

    in_pdb = glob.glob(os.path.join(params.pandda_dir, 'interesting_datasets/*{!s}*/*{!s}*-input.pdb'.format(tag,tag)))
    assert len(in_pdb)==1, 'len(pdb) == {!s}'.format(len(in_pdb))
    in_mtz = glob.glob(os.path.join(params.pandda_dir, 'interesting_datasets/*{!s}*/*{!s}*-input.mtz'.format(tag,tag)))
    assert len(in_mtz)==1, 'len(mtz) == {!s}'.format(len(in_mtz))
    out_pdb = os.path.join(tag_dir, 'dimple.pdb')
    out_mtz = os.path.join(tag_dir, 'dimple.mtz')
    os.symlink(os.path.abspath(os.path.realpath(in_pdb[0])), out_pdb)
    os.symlink(os.path.abspath(os.path.realpath(in_mtz[0])), out_mtz)

    in_cif = glob.glob(os.path.join(params.pandda_dir, 'interesting_datasets/*{!s}*/ligand_files/*.cif'.format(tag)))
    if in_cif:
        assert len(in_cif)==1, 'len(cif) == {!s}'.format(len(in_cif))
        in_cif = os.path.abspath(os.path.realpath(in_cif[0]))
        out_cif = os.path.join(tag_dir, os.path.basename(in_cif))
        shutil.copy(in_cif, out_cif)
        in_lig = in_cif.replace('.cif','.pdb')
        out_lig = os.path.join(tag_dir, os.path.basename(in_lig))
        shutil.copy(in_lig, out_lig)

        if params.refine:
            ref_dir = os.path.join(tag_dir, 'Refine_1')
            if not os.path.exists(ref_dir): os.mkdir(ref_dir)
            comm = """phenix.refine {!s} {!s} {!s} prefix={!s} refine.occupancies.individual='resname LIG'""".format(out_mf, out_mtz, out_cif, os.path.join(ref_dir, 'merged'))
            print comm
            os.system(comm)
    
