#!/usr/bin/env pandda.python

import os, sys, shutil, copy

from libtbx import phil

############################################################################

master_phil_def = """
input {
    outdir = ./merged
        .type = str
    pandda_dir = ./
        .type = str
}
"""
# Read in the master phil
master_phil = phil.parse(master_phil_def)
# Show defaults and exit
if '--show-defaults' in sys.argv:
    print('\n# DEFAULTS\n')
    master_phil.show()
    sys.exit()
# Copy the args so that we can remove items from the list without affecting sys.argv etc
args = copy.copy(sys.argv[1:])
# Build an interpreter from the master phil
cmd_interpr = master_phil.command_line_argument_interpreter(home_scope="input")
# Look for cmd line arguments
cmd_line_args = [a for a in args if (('=' in a) and not os.path.exists(a))]
# Remove them from the original lists
[args.remove(a) for a in cmd_line_args]
# Parse these arguments
cmd_sources = [cmd_interpr.process(arg=a) for a in cmd_line_args]
# Combine the phils
working_phil = master_phil.fetch(sources=cmd_sources)

# Pull out the python object of the arguments
params = working_phil.extract().input

# Create output directory
if not os.path.exists(params.outdir):   os.mkdir(params.outdir)
# Check input directory
assert os.path.exists(params.pandda_dir)

files_to_merge = [a for a in args if (a.endswith('.pdb') and os.path.exists(a))]

############################################################################

print '\n'.join(files_to_merge)

tags = list(set([os.path.basename(f).split('-')[0] for f in files_to_merge]))

for tag in tags:

    tag_files = [f for f in files_to_merge if os.path.basename(f).startswith(tag)]

    print tag, '-', len(tag_files), 'files'
    
    in_f = os.path.join(params.pandda_dir, 'interesting_datasets/*{!s}*/*{!s}*-input.pdb'.format(tag,tag))
    temp_files = []

    for i, lig_f in enumerate(tag_files):
        print i, lig_f

        temp_f = os.path.join(params.outdir, tag+'-'+str(i)+'-temp-merged.pdb')

        comm = """pdb_merge xyzin1 {!s} xyzin2 {!s} xyzout {!s} << eof
nomerge
END
eof""".format(in_f, lig_f, temp_f)

        print comm
        os.system(comm)
        
        # Reset in file for next ligand    
        in_f = temp_f

        # Append temp file to list
        temp_files.append(temp_f)
       
    # Create final output file 
    out_f = os.path.join(params.outdir, tag+'-merged.pdb')
    # Move the last temp file to the final output
    shutil.copy(temp_f, out_f)

    # Delete all of the temporary files
    [os.remove(f) for f in temp_files]
