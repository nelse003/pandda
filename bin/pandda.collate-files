#!/usr/bin/env pandda.python

import os, sys, shutil, copy, glob

import libtbx.phil

############################################################################

master_phil_def = """
input {
    pdb = []
        .type = path
        .multiple = True

    outdir = ./collated
        .type = str

    outprefix = 'pandda-output'

    pandda_dir = ./
        .type = str

    label = ''
        .type = str

    sep_style = '-'
        .help = 'Separator used to identify the dataset tag at the beginning of the filename. Tag is filename up to the first instance of sep_style'
        .type = str

    refine = False
        .type = bool

    verbose = False
        .type = bool
}
"""

############################################################################

def parse_input(args):
    # Read in the master phil
    master_phil = libtbx.phil.parse(master_phil_def)
    # Show defaults and exit
    if '--show-defaults' in args:
        master_phil.show()
        sys.exit()
    # Copy the args so that we can remove items from the list without affecting args etc
    args = copy.copy(args)
    # Construct interpreter
    cmd_interpr = master_phil.command_line_argument_interpreter(home_scope="input")
    # Process input arguments
    phil_objects = []
    for arg in args:
        try: 
            # Custom rules for modifying arguments
            if ('=' not in arg) and arg.endswith('.pdb') and os.path.exists(arg):
                arg = 'pdb='+arg
            # Attempt to process arg
            cmd_line_args = cmd_interpr.process(arg=arg)
        except KeyboardInterrupt: 
            raise
        except Exception: 
            raise Sorry("Unknown file or keyword: %s" % arg)
        else: 
            phil_objects.append(cmd_line_args)
                                                                                                                                 
    # Extract Scope object
    working_phil = master_phil.fetch(sources=phil_objects)
    return working_phil

def run(args):

    # Parse input
    working_phil = parse_input(args)
    # Extract parameters
    params = working_phil.extract().input

    # Create output directory
    if not os.path.exists(params.outdir):   os.mkdir(params.outdir)
    # Check input directory
    assert os.path.exists(params.pandda_dir)

    ############################################################################

    print '\n'.join(merged_files)

    for mf in params.pdb:
        
        tag = os.path.basename(mf).split(params.sep_style)[0]

        tag_dir = os.path.join(params.outdir, params.label+tag)

        if os.path.exists(tag_dir):
            print 'DIRECTORY ALREADY EXISTS'
            continue
        else:
            os.mkdir(tag_dir)

        print 'BUILDING DIRECTORY:', tag_dir

        out_mf = os.path.join(tag_dir, params.outprefix+'.pdb')
        shutil.copy(mf, out_mf)

        in_pdb = glob.glob(os.path.join(params.pandda_dir, 'interesting_datasets/*{!s}*/*{!s}*-input.pdb'.format(tag,tag)))
        assert len(in_pdb)==1, 'len(in_pdb) == {!s}'.format(len(in_pdb))
        in_mtz = glob.glob(os.path.join(params.pandda_dir, 'interesting_datasets/*{!s}*/*{!s}*-input.mtz'.format(tag,tag)))
        assert len(in_mtz)==1, 'len(in_mtz) == {!s}'.format(len(in_mtz))
        out_pdb = os.path.join(tag_dir, 'pandda-input.pdb')
        out_mtz = os.path.join(tag_dir, 'pandda-input.mtz')
        os.symlink(os.path.abspath(os.path.realpath(in_pdb[0])), out_pdb)
        os.symlink(os.path.abspath(os.path.realpath(in_mtz[0])), out_mtz)

        in_cif = glob.glob(os.path.join(params.pandda_dir, 'interesting_datasets/*{!s}*/ligand_files/*.cif'.format(tag)))
        if in_cif:
            assert len(in_cif)==1, 'len(cif) == {!s}'.format(len(in_cif))
            in_cif = os.path.abspath(os.path.realpath(in_cif[0]))
            out_cif = os.path.join(tag_dir, os.path.basename(in_cif))
            shutil.copy(in_cif, out_cif)
            in_lig = in_cif.replace('.cif','.pdb')
            out_lig = os.path.join(tag_dir, os.path.basename(in_lig))
            shutil.copy(in_lig, out_lig)

#            if params.refine:
#                ref_dir = os.path.join(tag_dir, 'Refine_1')
#                if not os.path.exists(ref_dir): os.mkdir(ref_dir)
#                comm = """phenix.refine {!s} {!s} {!s} prefix={!s} refine.occupancies.individual='resname LIG'""".format(out_mf, out_mtz, out_cif, os.path.join(ref_dir, 'merged'))
#                print comm
#                os.system(comm)
#
    return
    
if __name__ == '__main__':
    
    run(args=sys.argv[1:])
