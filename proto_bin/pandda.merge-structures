#!/usr/bin/env pandda.python

import os, sys, shutil, copy

import libtbx.phil

############################################################################

master_phil_def = """
merging {
    pdb = None
        .type = path

    lig = []
        .type = path
        .multiple = True

    outdir = ./merged
        .type = path

    outname = 'merged.pdb'
        .type = str

    verbose = False
        .type = bool
    
}
"""

############################################################################

def parse_input(args):
    # Read in the master phil
    master_phil = libtbx.phil.parse(master_phil_def)
    # Show defaults and exit
    if '--show-defaults' in args:
        master_phil.show()
        sys.exit()
    # Copy the args so that we can remove items from the list without affecting args etc
    args = copy.copy(args)
    # Construct interpreter
    cmd_interpr = master_phil.command_line_argument_interpreter(home_scope="merging")
    # Process input arguments
    phil_objects = []
    for arg in args:
        try:
            # Custom rules for modifying arguments
            if ('=' not in arg) and arg.endswith('.pdb') and os.path.exists(arg):
                arg = 'lig='+arg
            # Attempt to process arg
            cmd_line_args = cmd_interpr.process(arg=arg)
        except KeyboardInterrupt:
            raise
        except Exception:
            raise Sorry("Unknown file or keyword: %s" % arg)
        else:
            phil_objects.append(cmd_line_args)

    # Extract Scope object
    working_phil = master_phil.fetch(sources=phil_objects)
    return working_phil

def run(args):
    # Parse input
    working_phil = parse_input(args)
    # Extract parameters
    params = working_phil.extract().input

    # Create output directory
    if not os.path.exists(params.outdir):   os.mkdir(params.outdir)

    # Assert that at least one file has been given
    assert params.pdb or params.lig, 'NO FILES GIVEN'

    # If not pdb, take first lig as pdb
    if not params.pdb: params.pdb = params.lig.pop(0)

    ############################################################################
   
    # Store temporary files for deleting 
    temp_files = []
    # First file into which others are merged
    in_f = params.pdb
    
    for i, lig_f in enumerate(params.lig):
        print i, lig_f

        temp_f = os.path.join(params.outdir, str(i)+'-temp-merged.pdb')

        comm = """pdb_merge xyzin1 {!s} xyzin2 {!s} xyzout {!s} << eof
nomerge
END
eof""".format(in_f, lig_f, temp_f)

        print comm
        os.system(comm)
        
        # Reset in file for next ligand    
        in_f = temp_f

        # Append temp file to list
        temp_files.append(temp_f)
           
    # Create final output file 
    out_f = os.path.join(params.outdir, params.outname)
    # Move the last temp file to the final output
    shutil.copy(temp_f, out_f)

    # Delete all of the temporary files
    [os.remove(f) for f in temp_files]

if __name__ == '__main__':
    run(args=sys.argv[1:])
