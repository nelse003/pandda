#! /usr/local/python/python2.7.3-64bit/bin/python

import os, sys

from Prototypes.SoakParser import SoakParser
from Prototypes.AutoModel.RunPipeline import RunLigandPipeline

print('Input Command:\n{!s}'.format(' '.join(sys.argv)))

arg_parser = SoakParser()
inputs, inputs_dict = arg_parser.parseArguments()

datasets_to_process = open(inputs.csv, 'r').read().strip().split('\n')

print('{!s} Datasets to Process'.format(len(datasets_to_process)))

if not os.path.exists(inputs.outdir):
    os.mkdir(inputs.outdir)

ModelRuns = []
ModelErrors = []

for dataset in datasets_to_process:

    print 'Line:', dataset

    outtemplate, smile, inmtz = dataset.split(',')

    if os.path.exists(os.path.join(inputs.outdir,outtemplate,'flynn.scores')):
        print 'SCORES ALREADY EXIST - SKIPPING'
        continue

#    print outtemplate, smile, inmtz

    for b,f in [('writedict','flynn')]:
        try:
            # SET THE MAIN ARGUMENTS
            args = ['--ref',inputs.refpdb,'--mtz',inmtz,'--smile',smile,'--outdir',os.path.join(inputs.outdir,outtemplate),'--outtemplate',outtemplate,'--exp',inputs.experiment]
            args.append('--verbose')

            if inputs.cif:
                args.extend(['--cif',inputs.cif])

            # SET THE PROGRAMS TO BE USED
            args.extend(['--builder',b,'--fitter',f,'--refiner','refmac'])
            # RUN THE PIPELINE
            Out = RunLigandPipeline(args)

            # STORE THE OUTPUT OBJECT IF SUCCESSFUL
            ModelRuns.append(Out)

        except KeyboardInterrupt:
            raise
        except PipelineError as err:
            print err
            ModelErrors.append('Pipeline has failed. {!s}'.format(str(err)))
        except MolecularSubstitutionError as err:
            print err
            ModelErrors.append('Molecular Substitution has failed. {!s}'.format(str(err)))
            break
        except FittingError as err:
            print err
            ModelErrors.append('{!s} has failed. {!s}'.format(f.upper(),str(err)))
        except RDkitReadError as err:
            print err
            ModelErrors.append('Reading of molecule has failed. {!s}'.format(err))
#        except Exception as err:
#            print err
#            ModelErrors.append('{!s} Raised: {!s}'.format(str(type(err)).split("'")[1].split('.')[-1],str(err)))
        except:
            print '=====>\nUnknown Failure: {!s}\n=====>'.format(f)
            print '=====>\nUnknown Failure: {!s}\n=====>'.format(inputs.outdir)
            ModelErrors.append('Unknown Error!')
            raise

print '\n'.join(ModelErrors)

inscores = os.path.join(inputs.outdir,'*/flynn.scores')
outscores = os.path.join(inputs.outdir,'all_scores.csv')

print('Combining {!s} into {!s}'.format(inscores, outscores))

os.system("head -n 1 {!s} | grep -v '^$\|=' | grep -m1 '' >> {!s}".format(inscores, outscores))
os.system("tail -n +2 {!s} | grep -v '^$\|=\|fragged' >> {!s}".format(inscores,outscores))
