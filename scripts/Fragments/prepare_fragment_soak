#! /usr/local/python/python2.7.3-64bit/bin/python

import os, sys, glob, time

from sgcCode.Beehive import BeehiveDatabase

# Get a fragment soak name
if sys.argv[1:]:
    frag_soak_name = sys.argv[1]
else:
    frag_soak_name = 'unknown-soak'

# Get the Current Directory
data_top_folder= os.getcwd()
print('Looking for data in the current directory: {!s}'.format(data_top_folder))

# Load Beehive
bee = BeehiveDatabase(test=True)
bee_targets = bee.GetTargetsFromBeehive()

# Finding target
target = [t for t in bee_targets for p in data_top_folder.split('/') if t == p][0]
print('Target: {!s}'.format(target))

# Load list of registered xtals
xtals = bee.GetXtalsFromBeehive(target)

# Creating output directory 
outdir = '/home/npearce/Analyses/FragmentSoaks/{!s}-{!s}'.format(target, frag_soak_name)
print('Outputting to {!s}'.format(outdir))

# Output csv
outfile = os.path.join(outdir,'{!s}-fragment-soak-input.csv'.format(target))
assert not os.path.exists(outfile), 'Output file already exists!'
print('Recording fragment soak information in {!s}'.format(outfile))

# Get all of the subfolders
subfolders = [f for f in glob.glob(os.path.join(data_top_folder,'*')) if '-x' in os.path.basename(f)]
subfolders = sorted(subfolders, key = lambda f: int(os.path.basename(f).split('-x')[1].split('-')[0]))
assert subfolders, 'No subfolders containing crystal numbers found!'

# Get ones that don't match with expected filenames
rejected = [f for f in glob.glob(os.path.join(data_top_folder,'*')) if not '-x' in os.path.basename(f)]
print('REJECTED FOLDERS: \n\t{!s}'.format('\n\t'.join(rejected) if rejected else None))

# Check with user
dumdum = raw_input('Continue? ')
if dumdum.lower().startswith('n'):
    raise SystemExit()

# Create outdir
if not os.path.exists(outdir): os.mkdir(outdir)
# Make symlink to input data
os.symlink(data_top_folder, os.path.join(outdir, 'inputdata'))
# Look for reference pdbfile
if os.path.exists(os.path.join(data_top_folder,'../Reference/reference.pdb')):
    os.symlink(os.path.abspath(os.path.join(data_top_folder,'../Reference/reference.pdb')),os.path.join(outdir, 'reference.pdb'))

NO_XTALS = []
NO_SMILES = []
NO_MTZS = []

for folder in subfolders:

    # Find the xtal id (allowing for differing formats between fragment soaks)
    current_xtal = [x for x in xtals if '-'.join([target,x]) == os.path.basename(folder)]
    if not current_xtal:
        current_xtal = [x for x in xtals if os.path.basename(folder).endswith('-'+x)]

    if len(current_xtal)==0:
        print 'NO XTALS: {!s}'.format(folder)
        NO_XTALS.append(folder)
        continue
    elif len(current_xtal)>1:
        raise Exception('TOO MANY XTAL IDS FOUND: {!s}'.format(folder))
    else:
        current_xtal = '-'.join([target,current_xtal[0]])

    current_smiles = bee.GetXtalMountSmilesFromBeehive(current_xtal)

    if (not current_smiles) or (current_smiles in ['OCCO','']):
        print 'NO SMILES: {!s}'.format(current_xtal)
        NO_SMILES.append(folder)
        continue

    # Find the mtz file in the subfolder (allowing for differing formats between fragment soaks)
    mtz_file = glob.glob(os.path.join(folder, '{!s}.mtz'.format(current_xtal)))
    if not mtz_file: 
        mtz_file = glob.glob(os.path.join(folder, '*.rmtz'))

    if len(mtz_file)==0:
        print 'NO MTZ: {!s}'.format(folder)
        NO_MTZS.append(folder)
        continue
    elif len(mtz_file)>1:
        raise Exception('TOO MANY MTZS FOUND: {!s}'.format(folder))
    else:
        mtz_file = mtz_file[0]

    print current_xtal, current_smiles, os.path.basename(mtz_file)

    with open(outfile, 'a') as outputfile:
        outputfile.write(','.join([current_xtal, current_smiles, mtz_file])+'\n')

print('{!s} subfolders processed.'.format(len(subfolders)))
print('{!s} subfolders without XTAL IDs (Folder names should include crystal number *-x###): \n\t{!s}'.format(len(NO_XTALS), '\n\t'.join(NO_XTALS) if NO_XTALS else None))
print('{!s} subfolders without SMILEs in Beehive (Please add and run again to include these files): \n\t{!s}'.format(len(NO_SMILES), '\n\t'.join(NO_SMILES) if NO_SMILES else None))
print('{!s} subfolders without MTZ FILEs (either target-x### or *.rmtz): \n\t{!s}'.format(len(NO_MTZS), '\n\t'.join(NO_MTZS) if NO_MTZS else None))
