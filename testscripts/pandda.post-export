#!/usr/bin/env pandda.python

import os, sys, glob, time, re
import subprocess
import numpy, pandas

from Giant.jiffies import set_conformer_occupancies 

top_dir = os.getcwd()
print 'WORKING FROM: {}'.format(top_dir)

for dir in glob.glob(os.path.join(top_dir,'*')):

    print '=================================================>>>'

    if not os.path.isdir(dir):
        print 'SKIPPING (NOT DIR): {}'.format(dir)
        continue

    os.chdir(dir)

    # Input
    pdb_in = glob.glob('./*-combined-model.pdb')[0]
    mtz_in = glob.glob('./*-input.mtz')[0]
    # Output
    occ_set_pdb = './occupancy_set.pdb'
    link_out = './refine.pdb'
    ref_log = './initial-refinement.log'

    # Skip?
    if os.path.exists(link_out): 
        print 'SKIPPING (ALREADY DONE): {}'.format(dir)
        continue
    else:
        print 'PROCESSING: {}'.format(dir)

    # Set low ligand occupancy
    occ_params = set_conformer_occupancies.master_phil.extract()
    occ_params.input = pdb_in
    occ_params.output = occ_set_pdb
    occ_params.res_ids = 'LIG,UNL,FRG'
    occ_params.overwrite = True
    # Run
    print 'SETTING LIGANDS TO LOW OCCUPANCY'
    set_conformer_occupancies.run(occ_params)

    # Run round of refinement
    cifs = glob.glob('./*.cif')
    prms = glob.glob('phenix_refine.params')
    refine_commands = ['phenix.refine',occ_set_pdb,mtz_in,'output.prefix=refine'] + cifs + prms
    print 'RUNNING REFINEMENT: {}'.format(' '.join(refine_commands))

    print 'WRITING LOG TO: {}'.format(ref_log)
    with open(ref_log, 'a') as fh:
        ret_code = subprocess.call(refine_commands, stdout=fh, stderr=fh)
    print 'RETURN CODE: {}'.format(ret_code)
    if ret_code == 1:
        print 'FAILED - RETURN CODE: {}'.format(ret_code)
       
    try: os.symlink('refine_001.pdb', link_out)
    except: print 'FAILED TO LINK'
    try: os.symlink('refine_001.mtz', link_out.replace('.pdb','.mtz'))
    except: print 'FAILED TO LINK'

os.chdir(top_dir)
